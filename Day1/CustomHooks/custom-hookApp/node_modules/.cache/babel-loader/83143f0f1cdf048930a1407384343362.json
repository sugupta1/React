{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useHttp = (requestCOnfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestCOnfig.URL, {\n        method: requestCOnfig.method,\n        headers: requestCOnfig.headers,\n        body: JSON.stringify(requestCOnfig.body)\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n    return {\n      isLoading,\n      error,\n      sendRequest\n    };\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/React/Day1/CustomHooks/custom-hookApp/src/components/hooks/use-http.js"],"names":["useState","useHttp","requestCOnfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","URL","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AACA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA4B;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMQ,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BT,aAAa,CAACU,GADY,EACR;AACdC,QAAAA,MAAM,EAACX,aAAa,CAACW,MADP;AAEdC,QAAAA,OAAO,EAACZ,aAAa,CAACY,OAFR;AAGdC,QAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B;AAHS,OADQ,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AAED,KAfD,CAeE,OAAOC,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAO;AAACD,MAAAA,SAAD;AACCE,MAAAA,KADD;AAECE,MAAAA;AAFD,KAAP;AAGD,GAzBD;AA0BD,CA9BD;;GAAMP,O;;AA+BN,eAAeA,OAAf","sourcesContent":["import {useState} from 'react';\r\nconst useHttp = (requestCOnfig, applyData)=>{\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        requestCOnfig.URL,{\r\n            method:requestCOnfig.method,\r\n            headers:requestCOnfig.headers,\r\n            body:JSON.stringify(requestCOnfig.body)\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Request failed!');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n    } catch (err) {\r\n      setError(err.message || 'Something went wrong!');\r\n    }\r\n    setIsLoading(false);\r\n    return {isLoading,\r\n            error,\r\n            sendRequest}\r\n  };\r\n}\r\nexport default useHttp; "]},"metadata":{},"sourceType":"module"}