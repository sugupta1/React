{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Day1\\\\CustomHooks\\\\custom-hookApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './components/hooks/use-http';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //const [isLoading, setIsLoading] = useState(false);\n  //const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const transformTask = taskObj => {\n    const loadedTasks = [];\n    console.log(taskObj);\n\n    for (const taskKey in taskObj) {\n      loadedTasks.push({\n        id: taskKey,\n        text: taskObj[taskKey].text\n      });\n    }\n\n    setTasks(loadedTasks);\n  };\n\n  const {\n    isLoading,\n    error,\n    sendRequest: fetchTasks\n  } = useHttp('https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json', transformTask); // const fetchTasks = async (taskText) => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch(\n  //       'https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json'\n  //     );\n  //     if (!response.ok) {\n  //       throw new Error('Request failed!');\n  //     }\n  //     const data = await response.json();\n  //     const loadedTasks = [];\n  //     for (const taskKey in data) {\n  //       loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n  //     }\n  //     setTasks(loadedTasks);\n  //   } catch (err) {\n  //     setError(err.message || 'Something went wrong!');\n  //   }\n  //   setIsLoading(false);\n  // };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Av8CLYibJDuotuet7qQTw3aSbOc=\", false, function () {\n  return [useHttp];\n});\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/React/Day1/CustomHooks/custom-hookApp/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useHttp","App","tasks","setTasks","transformTask","taskObj","loadedTasks","console","log","taskKey","push","id","text","isLoading","error","sendRequest","fetchTasks","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,OAAP,MAAoB,6BAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMO,aAAa,GAAGC,OAAO,IAAE;AAC7B,UAAMC,WAAW,GAAG,EAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;;AACA,SAAK,MAAMI,OAAX,IAAsBJ,OAAtB,EAA+B;AAC7BC,MAAAA,WAAW,CAACI,IAAZ,CAAiB;AAAEC,QAAAA,EAAE,EAAEF,OAAN;AAAeG,QAAAA,IAAI,EAAEP,OAAO,CAACI,OAAD,CAAP,CAAiBG;AAAtC,OAAjB;AACD;;AACDT,IAAAA,QAAQ,CAACG,WAAD,CAAR;AACD,GAPD;;AAQA,QAAM;AAACO,IAAAA,SAAD;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,WAAW,EAACC;AAA/B,MAA8ChB,OAAO,CAAC,+DAAD,EAAiEI,aAAjE,CAA3D,CAba,CAcb;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/Bf,IAAAA,QAAQ,CAAEgB,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEf,KADT;AAEE,MAAA,OAAO,EAAEW,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEE;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA5DQf,G;UAa6CD,O;;;KAb7CC,G;AA4DR;AAED,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './components/hooks/use-http';\n\nfunction App() {\n  //const [isLoading, setIsLoading] = useState(false);\n  //const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const transformTask = taskObj=>{\n    const loadedTasks = [];\n    console.log(taskObj);\n    for (const taskKey in taskObj) {\n      loadedTasks.push({ id: taskKey, text: taskObj[taskKey].text });\n    }\n    setTasks(loadedTasks);\n  }\n  const {isLoading, error, sendRequest:fetchTasks } = useHttp('https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json',transformTask)\n  // const fetchTasks = async (taskText) => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch(\n  //       'https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json'\n  //     );\n\n  //     if (!response.ok) {\n  //       throw new Error('Request failed!');\n  //     }\n\n  //     const data = await response.json();\n\n  //     const loadedTasks = [];\n\n  //     for (const taskKey in data) {\n  //       loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n  //     }\n\n  //     setTasks(loadedTasks);\n  //   } catch (err) {\n  //     setError(err.message || 'Something went wrong!');\n  //   }\n  //   setIsLoading(false);\n  // };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}