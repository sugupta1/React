{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Day1\\\\CustomHooks\\\\custom-hookApp\\\\src\\\\App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './components/hooks/use-http';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = async taskText => {\n    _s();\n\n    // setIsLoading(true);\n    // setError(null);\n    // try {\n    //   const response = await fetch(\n    //     'https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json'\n    //   );\n    //   if (!response.ok) {\n    //     throw new Error('Request failed!');\n    //   }\n    //   const data = await response.json();\n    //   const loadedTasks = [];\n    //   for (const taskKey in data) {\n    //     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n    //   }\n    //   setTasks(loadedTasks);\n    // } catch (err) {\n    //   setError(err.message || 'Something went wrong!');\n    // }\n    // setIsLoading(false);\n    const {\n      isLoading,\n      error,\n      sendRequest\n    } = useHttp('https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json');\n  };\n\n  _s(fetchTasks, \"tOsjfxQTh0yCskJP8x7t05mJUjE=\", false, function () {\n    return [useHttp];\n  });\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/React/Day1/CustomHooks/custom-hookApp/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useHttp","App","tasks","setTasks","fetchTasks","taskText","isLoading","error","sendRequest","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,OAAP,MAAoB,6BAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAAA;;AACb;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMO,UAAU,GAAG,MAAOC,QAAP,IAAoB;AAAA;;AACrC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACE,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,QAAmCR,OAAO,CAAC,+DAAD,CAAhD;AACH,GA1BD;;AALa,KAKPI,UALO;AAAA,YA8BgCJ,OA9BhC;AAAA;;AAiCbJ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,cAAc,GAAIC,IAAD,IAAU;AAC/BP,IAAAA,QAAQ,CAAEQ,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEP,KADT;AAEE,MAAA,OAAO,EAAEI,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEH;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;IApDQH,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './components/hooks/use-http';\n\nfunction App() {\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = async (taskText) => {\n    // setIsLoading(true);\n    // setError(null);\n    // try {\n    //   const response = await fetch(\n    //     'https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json'\n    //   );\n\n    //   if (!response.ok) {\n    //     throw new Error('Request failed!');\n    //   }\n\n    //   const data = await response.json();\n\n    //   const loadedTasks = [];\n\n    //   for (const taskKey in data) {\n    //     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n    //   }\n\n    //   setTasks(loadedTasks);\n    // } catch (err) {\n    //   setError(err.message || 'Something went wrong!');\n    // }\n    // setIsLoading(false);\n      const {isLoading, error, sendRequest } = useHttp('https://httptest-b1e0c-default-rtdb.firebaseio.com/tasks.json')\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}