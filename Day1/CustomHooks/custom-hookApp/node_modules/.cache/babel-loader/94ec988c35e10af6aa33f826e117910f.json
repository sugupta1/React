{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.URL, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      }); // const response = await fetch(requestConfig.url, {\n      //     method: requestConfig.method,\n      //     headers: requestConfig.headers,\n      //     body: JSON.stringify(requestConfig.body),\n      //   });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/React/Day1/CustomHooks/custom-hookApp/src/components/hooks/use-http.js"],"names":["useState","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","URL","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AACA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA4B;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMQ,WAAW,GAAG,YAAY;AAC9BH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1BR,aAAa,CAACS,GADY,EACR;AACdC,QAAAA,MAAM,EAACV,aAAa,CAACU,MAAd,GAAsBV,aAAa,CAACU,MAApC,GAA4C,KADrC;AAEdC,QAAAA,OAAO,EAACX,aAAa,CAACW,OAAd,GAAwBX,aAAa,CAACW,OAAtC,GAA+C,EAFzC;AAGdC,QAAAA,IAAI,EAACZ,aAAa,CAACY,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAed,aAAa,CAACY,IAA7B,CAArB,GAA0D;AAHjD,OADQ,CAA5B,CADE,CAOJ;AACA;AACA;AACA;AACA;;AAEE,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAjB,MAAAA,SAAS,CAACgB,IAAD,CAAT;AAED,KApBD,CAoBE,OAAOE,GAAP,EAAY;AACZd,MAAAA,QAAQ,CAACc,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDjB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACC,GA3BH;;AA4BE,SAAO;AAACD,IAAAA,SAAD;AACCE,IAAAA,KADD;AAECE,IAAAA;AAFD,GAAP;AAIH,CApCD;;GAAMP,O;;AAqCN,eAAeA,OAAf","sourcesContent":["import {useState} from 'react';\r\nconst useHttp = (requestConfig, applyData)=>{\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        requestConfig.URL,{\r\n            method:requestConfig.method ?requestConfig.method :'GET',\r\n            headers:requestConfig.headers ? requestConfig.headers :{},\r\n            body:requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n        });\r\n    // const response = await fetch(requestConfig.url, {\r\n    //     method: requestConfig.method,\r\n    //     headers: requestConfig.headers,\r\n    //     body: JSON.stringify(requestConfig.body),\r\n    //   });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Request failed!');\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data)\r\n\r\n    } catch (err) {\r\n      setError(err.message || 'Something went wrong!');\r\n    }\r\n    setIsLoading(false);\r\n    };\r\n    return {isLoading,\r\n            error,\r\n            sendRequest,\r\n        };\r\n};\r\nexport default useHttp; "]},"metadata":{},"sourceType":"module"}