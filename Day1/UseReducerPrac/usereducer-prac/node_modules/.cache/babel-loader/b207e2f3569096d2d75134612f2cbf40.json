{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Day1\\\\UseReducerPrac\\\\usereducer-prac\\\\src\\\\store\\\\Auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogin: () => {},\n  onLogout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogin: loginHandler,\n      onLogout: logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/React/Day1/UseReducerPrac/usereducer-prac/src/store/Auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogin","onLogout","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACpCC,EAAAA,UAAU,EAAE,KADwB;AAEpCC,EAAAA,OAAO,EAAE,MAAI,CAAE,CAFqB;AAGpCC,EAAAA,QAAQ,EAAE,MAAI,CAAE;AAHoB,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAE;AAAA;;AACtC,QAAM,CAACJ,UAAD,EAAaK,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;AAEA,QAAIF,6BAA6B,KAAK,GAAtC,EAA2C;AAC3CD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACC;AACJ,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACtC;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GALD;;AAOA,QAAMQ,aAAa,GAAG,MAAM;AACxBN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB;AACAT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;;AAIA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAChCL,MAAAA,UAAU,EAAEA,UADoB;AAEhCC,MAAAA,OAAO,EAAEQ,YAFuB;AAGhCP,MAAAA,QAAQ,EAAEW;AAHsB,KAA7B;AAAA,cAICT,KAAK,CAACW;AAJP;AAAA;AAAA;AAAA;AAAA,UAAP;AAMH,CA5BM;;GAAMZ,mB;;KAAAA,mB;AA8Bb,eAAeL,WAAf","sourcesContent":["import React,{useState,useEffect} from \"react\"\r\n\r\nconst AuthContext = React.createContext({\r\n    isLoggedIn: false,\r\n    onLogin: ()=>{},\r\n    onLogout: ()=>{}\r\n\r\n});\r\nexport const AuthContextProvider = props=>{\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\r\n\r\n        if (storedUserLoggedInInformation === '1') {\r\n        setIsLoggedIn(true);\r\n        }\r\n    }, []);\r\n\r\n    const loginHandler = (email, password) => {\r\n        // We should of course check email and password\r\n        // But it's just a dummy/ demo anyways\r\n        localStorage.setItem('isLoggedIn', '1');\r\n        setIsLoggedIn(true);\r\n    };\r\n\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem('isLoggedIn');\r\n        setIsLoggedIn(false);\r\n    };\r\n    return(<AuthContext.Provider value={{\r\n        isLoggedIn: isLoggedIn,\r\n        onLogin: loginHandler,\r\n        onLogout: logoutHandler\r\n        }}>{props.children}\r\n        </AuthContext.Provider>)\r\n}\r\n\r\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}